"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _clsx = _interopRequireDefault(require("clsx"));

var _useToggleItems2 = _interopRequireDefault(require("./useToggleItems"));

var _useSelectItem2 = _interopRequireDefault(require("./useSelectItem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _default = function _default(initialSelectedKey, initialOpenKeys) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var _useSelectItem = (0, _useSelectItem2["default"])(initialSelectedKey || ''),
      selectedKey = _useSelectItem.selectedKey,
      setSelectedKey = _useSelectItem.setSelectedKey;

  var _useToggleItems = (0, _useToggleItems2["default"])(initialOpenKeys || [], options),
      openKeys = _useToggleItems.openKeys,
      _onToggle = _useToggleItems.onToggle;

  var getState = function getState(_ref) {
    var key = _ref.key,
        keyMap = _ref.keyMap;
    var selected = selectedKey === key;
    var active = keyMap[key].includes(selectedKey) || selected;
    return {
      selected: selected,
      active: active
    };
  };

  var injectItemProps = function injectItemProps(params) {
    var classes = params.classes,
        level = params.level,
        key = params.key,
        onClick = params.onClick,
        subMenus = params.subMenus,
        toggleSeparated = params.toggleSeparated,
        keyMap = params.keyMap;

    var _getState = getState({
      key: key,
      keyMap: keyMap
    }),
        active = _getState.active,
        selected = _getState.selected;

    return {
      key: key,
      className: (0, _clsx["default"])(classes["lv".concat(level, "Item")], active && classes["lv".concat(level, "ItemActive")], selectedKey === key && classes["lv".concat(level, "ItemSelected")], openKeys.includes(key) && classes["lv".concat(level, "ItemExpanded")]),
      component: subMenus ? 'div' : undefined,
      toggle: !!subMenus,
      toggleSeparated: toggleSeparated,
      onToggle: function onToggle() {
        return subMenus ? _onToggle(key) : {};
      },
      onMenuClick: function onMenuClick() {
        onClick(_extends(_extends({}, params), {}, {
          active: active,
          selected: selected
        }));

        if (!subMenus || toggleSeparated) {
          return setSelectedKey(key);
        }

        if (subMenus) {
          return _onToggle(key);
        }

        return {};
      },
      expanded: openKeys.includes(key),
      selected: subMenus ? toggleSeparated && selected : selected
    };
  };

  var injectParentProps = function injectParentProps(_ref2) {
    var classes = _ref2.classes,
        level = _ref2.level,
        key = _ref2.key,
        keyMap = _ref2.keyMap;

    var _getState2 = getState({
      key: key,
      keyMap: keyMap
    }),
        active = _getState2.active;

    return {
      key: key,
      className: (0, _clsx["default"])(classes["lv".concat(level, "Parent")], openKeys.includes(key) && classes["lv".concat(level, "ParentExpanded")], active && classes["lv".concat(level, "ParentActive")])
    };
  };

  var injectListProps = function injectListProps(_ref3) {
    var classes = _ref3.classes,
        level = _ref3.level;
    return {
      className: (0, _clsx["default"])(classes.list, classes["lv".concat(level, "List")])
    };
  };

  return {
    injectParentProps: injectParentProps,
    injectItemProps: injectItemProps,
    injectListProps: injectListProps
  };
};

exports["default"] = _default;