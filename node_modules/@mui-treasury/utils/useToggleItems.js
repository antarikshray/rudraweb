"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = require("react");

var _lodash = _interopRequireDefault(require("lodash.isequal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var isString = function isString(str) {
  return typeof str === 'string';
};

var getResult = function getResult(val) {
  return isString(val) ? [val] : val;
}; // problem
// useToggleItems([]) will cause effect to run infinitely when 1st rerender is triggered.
// solved by using useRef and some conditional statement


var _default = function _default(dynamicOpenKeys) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$multiple = options.multiple,
      multiple = _options$multiple === void 0 ? true : _options$multiple;

  var _useState = (0, _react.useState)(getResult(dynamicOpenKeys) || []),
      _useState2 = _slicedToArray(_useState, 2),
      openKeys = _useState2[0],
      setOpenKeys = _useState2[1];

  var temp = (0, _react.useRef)({
    value: dynamicOpenKeys,
    isToggled: false,
    justUpdated: false
  }); // store prev dynamicOpenKeys

  (0, _react.useEffect)(function () {
    var isFollowedByToggle = temp.current.justUpdated && temp.current.isToggled;
    var justUpdated = !(0, _lodash["default"])(temp.current.value, dynamicOpenKeys);

    if (justUpdated || // new external state
    isFollowedByToggle) {
      // use external state
      setOpenKeys(getResult(dynamicOpenKeys));
    }

    if (justUpdated) {
      temp.current.justUpdated = justUpdated;
    }

    if (isFollowedByToggle) {
      temp.current.isToggled = false;
    } // always copy dynamicOpenKeys to temp value
    // whenever dynamicOpenKeys changes


    temp.current.value = dynamicOpenKeys;
  }, [dynamicOpenKeys]);

  var getNewOpenKeys = function getNewOpenKeys(key) {
    if (openKeys.includes(key)) {
      // use want to hide this key's content
      if (multiple) return openKeys.filter(function (k) {
        return k !== key;
      });
      return [];
    } // use want to open this key's content


    if (multiple) return [].concat(_toConsumableArray(openKeys), [key]);
    return [key];
  };

  var onToggle = function onToggle(key) {
    var newOpenKeys = getNewOpenKeys(key);
    temp.current.isToggled = true;
    setOpenKeys(newOpenKeys);
  };

  return {
    openKeys: openKeys,
    setOpenKeys: setOpenKeys,
    onToggle: onToggle
  };
};

exports["default"] = _default;