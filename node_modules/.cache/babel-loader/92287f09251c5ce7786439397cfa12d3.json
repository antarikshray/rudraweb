{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nimport appendImportantToEachValue from './append-important-to-each-value';\nimport cssRuleSetToString from './css-rule-set-to-string';\nimport getState from './get-state';\nimport getStateKey from './get-state-key';\nimport cleanStateKey from './clean-state-key';\nimport getRadiumStyleState from './get-radium-style-state';\nimport hash from './hash';\nimport { isNestedStyle, mergeStyles } from './merge-styles';\nimport Plugins from './plugins/';\nimport ExecutionEnvironment from 'exenv';\nimport React from 'react';\nvar DEFAULT_CONFIG = {\n  plugins: [Plugins.mergeStyleArray, Plugins.checkProps, Plugins.resolveMediaQueries, Plugins.resolveInteractionStyles, Plugins.keyframes, Plugins.visited, Plugins.removeNestedStyles, Plugins.prefix, Plugins.checkProps]\n}; // Gross\n\nvar globalState = {}; // Declare early for recursive helpers.\n\nvar _resolveStyles5 = null;\n\nvar _shouldResolveStyles = function _shouldResolveStyles(component) {\n  return component.type && !component.type._isRadiumEnhanced;\n};\n\nvar _resolveChildren = function _resolveChildren(_ref) {\n  var children = _ref.children,\n      component = _ref.component,\n      config = _ref.config,\n      existingKeyMap = _ref.existingKeyMap,\n      extraStateKeyMap = _ref.extraStateKeyMap;\n\n  if (!children) {\n    return children;\n  }\n\n  var childrenType = typeof children === 'undefined' ? 'undefined' : _typeof(children);\n\n  if (childrenType === 'string' || childrenType === 'number') {\n    // Don't do anything with a single primitive child\n    return children;\n  }\n\n  if (childrenType === 'function') {\n    // Wrap the function, resolving styles on the result\n    return function () {\n      var result = children.apply(this, arguments);\n\n      if (React.isValidElement(result)) {\n        var _key = getStateKey(result);\n\n        delete extraStateKeyMap[_key];\n\n        var _resolveStyles = _resolveStyles5(component, result, config, existingKeyMap, true, extraStateKeyMap),\n            _element = _resolveStyles.element;\n\n        return _element;\n      }\n\n      return result;\n    };\n  }\n\n  if (React.Children.count(children) === 1 && children.type) {\n    // If a React Element is an only child, don't wrap it in an array for\n    // React.Children.map() for React.Children.only() compatibility.\n    var onlyChild = React.Children.only(children);\n\n    var _key2 = getStateKey(onlyChild);\n\n    delete extraStateKeyMap[_key2];\n\n    var _resolveStyles2 = _resolveStyles5(component, onlyChild, config, existingKeyMap, true, extraStateKeyMap),\n        _element2 = _resolveStyles2.element;\n\n    return _element2;\n  }\n\n  return React.Children.map(children, function (child) {\n    if (React.isValidElement(child)) {\n      var _key3 = getStateKey(child);\n\n      delete extraStateKeyMap[_key3];\n\n      var _resolveStyles3 = _resolveStyles5(component, child, config, existingKeyMap, true, extraStateKeyMap),\n          _element3 = _resolveStyles3.element;\n\n      return _element3;\n    }\n\n    return child;\n  });\n}; // Recurse over props, just like children\n\n\nvar _resolveProps = function _resolveProps(_ref2) {\n  var component = _ref2.component,\n      config = _ref2.config,\n      existingKeyMap = _ref2.existingKeyMap,\n      props = _ref2.props,\n      extraStateKeyMap = _ref2.extraStateKeyMap;\n  var newProps = props;\n  Object.keys(props).forEach(function (prop) {\n    // We already recurse over children above\n    if (prop === 'children') {\n      return;\n    }\n\n    var propValue = props[prop];\n\n    if (React.isValidElement(propValue)) {\n      var _key4 = getStateKey(propValue);\n\n      delete extraStateKeyMap[_key4];\n      newProps = _extends({}, newProps);\n\n      var _resolveStyles4 = _resolveStyles5(component, propValue, config, existingKeyMap, true, extraStateKeyMap),\n          _element4 = _resolveStyles4.element;\n\n      newProps[prop] = _element4;\n    }\n  });\n  return newProps;\n};\n\nvar _buildGetKey = function _buildGetKey(_ref3) {\n  var componentName = _ref3.componentName,\n      existingKeyMap = _ref3.existingKeyMap,\n      renderedElement = _ref3.renderedElement; // We need a unique key to correlate state changes due to user interaction\n  // with the rendered element, so we know to apply the proper interactive\n  // styles.\n\n  var originalKey = getStateKey(renderedElement);\n  var key = cleanStateKey(originalKey);\n  var alreadyGotKey = false;\n\n  var getKey = function getKey() {\n    if (alreadyGotKey) {\n      return key;\n    }\n\n    alreadyGotKey = true;\n\n    if (existingKeyMap[key]) {\n      var elementName = void 0;\n\n      if (typeof renderedElement.type === 'string') {\n        elementName = renderedElement.type;\n      } else if (renderedElement.type.constructor) {\n        elementName = renderedElement.type.constructor.displayName || renderedElement.type.constructor.name;\n      }\n\n      throw new Error('Radium requires each element with interactive styles to have a unique ' + 'key, set using either the ref or key prop. ' + (originalKey ? 'Key \"' + originalKey + '\" is a duplicate.' : 'Multiple elements have no key specified.') + ' ' + 'Component: \"' + componentName + '\". ' + (elementName ? 'Element: \"' + elementName + '\".' : ''));\n    }\n\n    existingKeyMap[key] = true;\n    return key;\n  };\n\n  return getKey;\n};\n\nvar _setStyleState = function _setStyleState(component, key, stateKey, value) {\n  if (!component._radiumIsMounted) {\n    return;\n  }\n\n  var existing = getRadiumStyleState(component);\n  var state = {\n    _radiumStyleState: _extends({}, existing)\n  };\n  state._radiumStyleState[key] = _extends({}, state._radiumStyleState[key]);\n  state._radiumStyleState[key][stateKey] = value;\n  component._lastRadiumState = state._radiumStyleState;\n  component.setState(state);\n};\n\nvar _runPlugins = function _runPlugins(_ref4) {\n  var component = _ref4.component,\n      config = _ref4.config,\n      existingKeyMap = _ref4.existingKeyMap,\n      props = _ref4.props,\n      renderedElement = _ref4.renderedElement; // Don't run plugins if renderedElement is not a simple ReactDOMElement or has\n  // no style.\n\n  if (!React.isValidElement(renderedElement) || typeof renderedElement.type !== 'string' || !props.style) {\n    return props;\n  }\n\n  var newProps = props;\n  var plugins = config.plugins || DEFAULT_CONFIG.plugins;\n  var componentName = component.constructor.displayName || component.constructor.name;\n\n  var getKey = _buildGetKey({\n    renderedElement: renderedElement,\n    existingKeyMap: existingKeyMap,\n    componentName: componentName\n  });\n\n  var getComponentField = function getComponentField(key) {\n    return component[key];\n  };\n\n  var getGlobalState = function getGlobalState(key) {\n    return globalState[key];\n  };\n\n  var componentGetState = function componentGetState(stateKey, elementKey) {\n    return getState(component.state, elementKey || getKey(), stateKey);\n  };\n\n  var setState = function setState(stateKey, value, elementKey) {\n    return _setStyleState(component, elementKey || getKey(), stateKey, value);\n  };\n\n  var addCSS = function addCSS(css) {\n    var styleKeeper = component._radiumStyleKeeper || component.context._radiumStyleKeeper;\n\n    if (!styleKeeper) {\n      if (__isTestModeEnabled) {\n        return {\n          remove: function remove() {}\n        };\n      }\n\n      throw new Error('To use plugins requiring `addCSS` (e.g. keyframes, media queries), ' + 'please wrap your application in the StyleRoot component. Component ' + 'name: `' + componentName + '`.');\n    }\n\n    return styleKeeper.addCSS(css);\n  };\n\n  var newStyle = props.style;\n  plugins.forEach(function (plugin) {\n    var result = plugin({\n      ExecutionEnvironment: ExecutionEnvironment,\n      addCSS: addCSS,\n      appendImportantToEachValue: appendImportantToEachValue,\n      componentName: componentName,\n      config: config,\n      cssRuleSetToString: cssRuleSetToString,\n      getComponentField: getComponentField,\n      getGlobalState: getGlobalState,\n      getState: componentGetState,\n      hash: hash,\n      mergeStyles: mergeStyles,\n      props: newProps,\n      setState: setState,\n      isNestedStyle: isNestedStyle,\n      style: newStyle\n    }) || {};\n    newStyle = result.style || newStyle;\n    newProps = result.props && Object.keys(result.props).length ? _extends({}, newProps, result.props) : newProps;\n    var newComponentFields = result.componentFields || {};\n    Object.keys(newComponentFields).forEach(function (fieldName) {\n      component[fieldName] = newComponentFields[fieldName];\n    });\n    var newGlobalState = result.globalState || {};\n    Object.keys(newGlobalState).forEach(function (key) {\n      globalState[key] = newGlobalState[key];\n    });\n  });\n\n  if (newStyle !== props.style) {\n    newProps = _extends({}, newProps, {\n      style: newStyle\n    });\n  }\n\n  return newProps;\n}; // Wrapper around React.cloneElement. To avoid processing the same element\n// twice, whenever we clone an element add a special prop to make sure we don't\n// process this element again.\n\n\nvar _cloneElement = function _cloneElement(renderedElement, newProps, newChildren) {\n  // Only add flag if this is a normal DOM element\n  if (typeof renderedElement.type === 'string') {\n    newProps = _extends({}, newProps, {\n      'data-radium': true\n    });\n  }\n\n  return React.cloneElement(renderedElement, newProps, newChildren);\n}; //\n// The nucleus of Radium. resolveStyles is called on the rendered elements\n// before they are returned in render. It iterates over the elements and\n// children, rewriting props to add event handlers required to capture user\n// interactions (e.g. mouse over). It also replaces the style prop because it\n// adds in the various interaction styles (e.g. :hover).\n//\n\n/* eslint-disable max-params */\n\n\n_resolveStyles5 = function resolveStyles(component, // ReactComponent, flow+eslint complaining\nrenderedElement) {\n  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_CONFIG;\n  var existingKeyMap = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var shouldCheckBeforeResolve = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var extraStateKeyMap = arguments[5]; // The extraStateKeyMap is for determining which keys should be erased from\n  // the state (i.e. which child components are unmounted and should no longer\n  // have a style state).\n\n  if (!extraStateKeyMap) {\n    var state = getRadiumStyleState(component);\n    extraStateKeyMap = Object.keys(state).reduce(function (acc, key) {\n      // 'main' is the auto-generated key when there is only one element with\n      // interactive styles and if a custom key is not assigned. Because of\n      // this, it is impossible to know which child is 'main', so we won't\n      // count this key when generating our extraStateKeyMap.\n      if (key !== 'main') {\n        acc[key] = true;\n      }\n\n      return acc;\n    }, {});\n  }\n\n  if (Array.isArray(renderedElement) && !renderedElement.props) {\n    var elements = renderedElement.map(function (element) {\n      // element is in-use, so remove from the extraStateKeyMap\n      if (extraStateKeyMap) {\n        var _key5 = getStateKey(element);\n\n        delete extraStateKeyMap[_key5];\n      } // this element is an array of elements,\n      // so return an array of elements with resolved styles\n\n\n      return _resolveStyles5(component, element, config, existingKeyMap, shouldCheckBeforeResolve, extraStateKeyMap).element;\n    });\n    return {\n      extraStateKeyMap: extraStateKeyMap,\n      element: elements\n    };\n  } // ReactElement\n\n\n  if (!renderedElement || // Bail if we've already processed this element. This ensures that only the\n  // owner of an element processes that element, since the owner's render\n  // function will be called first (which will always be the case, since you\n  // can't know what else to render until you render the parent component).\n  renderedElement.props && renderedElement.props['data-radium'] || // Bail if this element is a radium enhanced element, because if it is,\n  // then it will take care of resolving its own styles.\n  shouldCheckBeforeResolve && !_shouldResolveStyles(renderedElement)) {\n    return {\n      extraStateKeyMap: extraStateKeyMap,\n      element: renderedElement\n    };\n  }\n\n  var children = renderedElement.props.children;\n\n  var newChildren = _resolveChildren({\n    children: children,\n    component: component,\n    config: config,\n    existingKeyMap: existingKeyMap,\n    extraStateKeyMap: extraStateKeyMap\n  });\n\n  var newProps = _resolveProps({\n    component: component,\n    config: config,\n    existingKeyMap: existingKeyMap,\n    extraStateKeyMap: extraStateKeyMap,\n    props: renderedElement.props\n  });\n\n  newProps = _runPlugins({\n    component: component,\n    config: config,\n    existingKeyMap: existingKeyMap,\n    props: newProps,\n    renderedElement: renderedElement\n  }); // If nothing changed, don't bother cloning the element. Might be a bit\n  // wasteful, as we add the sentinel to stop double-processing when we clone.\n  // Assume benign double-processing is better than unneeded cloning.\n\n  if (newChildren === children && newProps === renderedElement.props) {\n    return {\n      extraStateKeyMap: extraStateKeyMap,\n      element: renderedElement\n    };\n  }\n\n  var element = _cloneElement(renderedElement, newProps !== renderedElement.props ? newProps : {}, newChildren);\n\n  return {\n    extraStateKeyMap: extraStateKeyMap,\n    element: element\n  };\n};\n/* eslint-enable max-params */\n// Only for use by tests\n\n\nvar __isTestModeEnabled = false;\n\nif (process.env.NODE_ENV !== 'production') {\n  _resolveStyles5.__clearStateForTests = function () {\n    globalState = {};\n  };\n\n  _resolveStyles5.__setTestMode = function (isEnabled) {\n    __isTestModeEnabled = isEnabled;\n  };\n}\n\nexport default _resolveStyles5;","map":null,"metadata":{},"sourceType":"module"}