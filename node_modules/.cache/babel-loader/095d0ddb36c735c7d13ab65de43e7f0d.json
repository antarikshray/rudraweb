{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _debounce = require('lodash.debounce');\n\nvar React = require('react');\n\nvar onElementResize = require('element-resize-event');\n\nfunction defaultGetDimensions(element) {\n  return [element.clientWidth, element.clientHeight];\n}\n/**\n * Wraps a react component and adds properties `containerHeight` and\n * `containerWidth`. Useful for responsive design. Properties update on\n * window resize. **Note** that the parent element must have either a\n * height or a width, or nothing will be rendered\n *\n * Can be used as a\n * [higher-order component](http://babeljs.io/blog/2015/06/07/react-on-es6-plus/#property-initializers)\n * or as an [ES7 class decorator](https://github.com/wycats/javascript-decorators)\n * (see examples)\n *\n * @param {object} [options]\n * @param {function} [options.getHeight] A function that is passed an element and returns element\n * height, where element is the wrapper div. Defaults to `(element) => element.clientHeight`\n * @param {function} [options.getWidth]  A function that is passed an element and returns element\n * width, where element is the wrapper div. Defaults to `(element) => element.clientWidth`\n * @param {number} [options.debounce] Optionally debounce the `onResize` callback function by\n * supplying the delay time in milliseconds. This will prevent excessive dimension\n * updates. See\n * https://lodash.com/docs#debounce for more information. Defaults to `0`, which disables debouncing.\n * @param {object} [options.debounceOpts] Options to pass to the debounce function. See\n * https://lodash.com/docs#debounce for all available options. Defaults to `{}`.\n * @param {object} [options.containerStyle] A style object for the `<div>` that will wrap your component.\n * The dimensions of this `div` are what are passed as props to your component. The default style is\n * `{ width: '100%', height: '100%', padding: 0, border: 0 }` which will cause the `div` to fill its\n * parent in most cases. If you are using a flexbox layout you will want to change this default style.\n * @param {string} [options.className] Control the class name set on the wrapper `<div>`\n * @param {boolean} [options.elementResize=false] Set true to watch the wrapper `div` for changes in\n * size which are not a result of window resizing - e.g. changes to the flexbox and other layout.\n * @return {function}                   A higher-order component that can be\n * used to enhance a react component `Dimensions()(MyComponent)`\n *\n * @example\n * // ES2015\n * import React from 'react'\n * import Dimensions from 'react-dimensions'\n *\n * class MyComponent extends React.Component {\n *   render() (\n *     <div\n *       containerWidth={this.props.containerWidth}\n *       containerHeight={this.props.containerHeight}\n *     >\n *     </div>\n *   )\n * }\n *\n * export default Dimensions()(MyComponent) // Enhanced component\n *\n * @example\n * // ES5\n * var React = require('react')\n * var Dimensions = require('react-dimensions')\n *\n * var MyComponent = React.createClass({\n *   render: function() {(\n *     <div\n *       containerWidth={this.props.containerWidth}\n *       containerHeight={this.props.containerHeight}\n *     >\n *     </div>\n *   )}\n * }\n *\n * module.exports = Dimensions()(MyComponent) // Enhanced component\n *\n */\n\n\nmodule.exports = function Dimensions() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$getDimensions = _ref.getDimensions,\n      getDimensions = _ref$getDimensions === undefined ? defaultGetDimensions : _ref$getDimensions,\n      _ref$debounce = _ref.debounce,\n      debounce = _ref$debounce === undefined ? 0 : _ref$debounce,\n      _ref$debounceOpts = _ref.debounceOpts,\n      debounceOpts = _ref$debounceOpts === undefined ? {} : _ref$debounceOpts,\n      _ref$elementResize = _ref.elementResize,\n      elementResize = _ref$elementResize === undefined ? false : _ref$elementResize;\n\n  return function (ComposedComponent) {\n    return function (_React$Component) {\n      _inherits(DimensionsHOC, _React$Component);\n\n      function DimensionsHOC() {\n        var _ref2;\n\n        var _temp, _this, _ret;\n\n        _classCallCheck(this, DimensionsHOC);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = DimensionsHOC.__proto__ || Object.getPrototypeOf(DimensionsHOC)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {}, _this.updateDimensionsImmediate = function () {\n          var dimensions = getDimensions(_this._parent);\n\n          if (dimensions[0] !== _this.state.containerWidth || dimensions[1] !== _this.state.containerHeight) {\n            _this.setState({\n              containerWidth: dimensions[0],\n              containerHeight: dimensions[1]\n            });\n          }\n        }, _this.updateDimensions = debounce === 0 ? _this.updateDimensionsImmediate : _debounce(_this.updateDimensionsImmediate, debounce, debounceOpts), _this.onResize = function () {\n          if (_this.rqf) return;\n          _this.rqf = _this.getWindow().requestAnimationFrame(function () {\n            _this.rqf = null;\n\n            _this.updateDimensions();\n          });\n        }, _temp), _possibleConstructorReturn(_this, _ret);\n      } // ES7 Class properties\n      // http://babeljs.io/blog/2015/06/07/react-on-es6-plus/#property-initializers\n      // Using arrow functions and ES7 Class properties to autobind\n      // http://babeljs.io/blog/2015/06/07/react-on-es6-plus/#arrow-functions\n      // Immediate updateDimensions callback with no debounce\n      // Optionally-debounced updateDimensions callback\n\n\n      _createClass(DimensionsHOC, [{\n        key: 'getWindow',\n        // If the component is mounted in a different window to the javascript\n        // context, as with https://github.com/JakeGinnivan/react-popout\n        // then the `window` global will be different from the `window` that\n        // contains the component.\n        // Depends on `defaultView` which is not supported <IE9\n        value: function getWindow() {\n          return this.refs.container ? this.refs.container.ownerDocument.defaultView || window : window;\n        }\n      }, {\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n          if (!this.refs.wrapper) {\n            throw new Error('Cannot find wrapper div');\n          }\n\n          this._parent = this.refs.wrapper.parentNode;\n          this.updateDimensionsImmediate();\n\n          if (elementResize) {\n            // Experimental: `element-resize-event` fires when an element resizes.\n            // It attaches its own window resize listener and also uses\n            // requestAnimationFrame, so we can just call `this.updateDimensions`.\n            onElementResize(this._parent, this.updateDimensions);\n          } else {\n            this.getWindow().addEventListener('resize', this.onResize, false);\n          }\n        }\n      }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n          this.getWindow().removeEventListener('resize', this.onResize); // TODO: remote element-resize-event listener.\n          // pending https://github.com/KyleAMathews/element-resize-event/issues/2\n        }\n        /**\n         * Returns the underlying wrapped component instance.\n         * Useful if you need to access a method or property of the component\n         * passed to react-dimensions.\n         *\n         * @return {object} The rendered React component\n         **/\n\n      }, {\n        key: 'getWrappedInstance',\n        value: function getWrappedInstance() {\n          return this.refs.wrappedInstance;\n        }\n      }, {\n        key: 'render',\n        value: function render() {\n          var _state = this.state,\n              containerWidth = _state.containerWidth,\n              containerHeight = _state.containerHeight;\n\n          if (this._parent && !containerWidth && !containerHeight) {\n            // only trigger a warning about the wrapper div if we already have a reference to it\n            console.warn('Wrapper div has no height or width, try overriding style with `containerStyle` option');\n          }\n\n          var wrapperStyle = {\n            overflow: 'visible',\n            height: 0,\n            width: 0\n          };\n          return React.createElement('div', {\n            style: wrapperStyle,\n            ref: 'wrapper'\n          }, (containerWidth || containerHeight) && React.createElement(ComposedComponent, _extends({}, this.state, this.props, {\n            updateDimensions: this.updateDimensions,\n            ref: 'wrappedInstance'\n          })));\n        }\n      }]);\n\n      return DimensionsHOC;\n    }(React.Component);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}